{"version":3,"sources":["Event.js","EventList.js","CitySearch.js","NumberOfEvents.js","mock-data.js","api.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Event","state","detailsHidden","toggleDetails","toggled","setState","className","this","props","event","summary","start","dateTime","location","description","onClick","Component","EventList","events","map","id","CitySearch","query","suggestions","showSuggestions","handleInputChanged","value","target","locations","filter","toUpperCase","indexOf","handleItemClicked","suggestion","updateEvents","type","onChange","onFocus","style","display","NumberOfEvents","numberOfEvents","mockData","kind","etag","status","htmlLink","created","updated","creator","email","self","organizer","timeZone","end","recurringEventId","originalStartTime","iCalUID","sequence","reminders","useDefault","eventType","extractLocations","Set","getEvents","a","NProgress","window","href","startsWith","done","getAccessToken","token","removeQuery","url","axios","get","result","data","localStorage","setItem","JSON","stringify","accessToken","getItem","checkToken","tokenCheck","error","removeItem","searchParams","URLSearchParams","search","code","results","authUrl","getToken","fetch","then","res","json","catch","history","pushState","pathname","newurl","protocol","host","encodeCode","encodeURIComponent","access_token","App","locationEvents","mounted","Boolean","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.6cbde612.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Event extends Component {\r\n  state = {\r\n    detailsHidden: true,\r\n  };\r\n\r\n  toggleDetails = () => {\r\n    const toggled = !this.state.detailsHidden;\r\n    this.setState({\r\n      detailsHidden: toggled,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"event\">\r\n        <h3 className=\"event-name\">{this.props.event.summary}</h3>\r\n        <p className=\"event-date-time\">{this.props.event.start.dateTime}</p>\r\n        <p className=\"event-location\">{this.props.event.location}</p>\r\n        {!this.state.detailsHidden && (\r\n          <div className=\"event-details\">\r\n            <p className=\"event-description\">{this.props.event.description}</p>\r\n          </div>\r\n        )}\r\n        <button className=\"toggle-details-button\" onClick={this.toggleDetails}>\r\n          {this.state.detailsHidden ? 'Show Details' : 'Hide Details'}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Event;\r\n","import React, { Component } from 'react';\r\nimport Event from './Event';\r\n\r\nclass EventList extends Component {\r\n  render() {\r\n    const { events } = this.props;\r\n    return (\r\n      <ul className=\"EventList\">\r\n        {events.map((event) => (\r\n          <li key={event.id}>\r\n            <Event event={event} />\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventList;\r\n","import React, { Component } from 'react';\r\n\r\nclass CitySearch extends Component {\r\n  //shorthand for using the constructor to initialize state\r\n  state = {\r\n    query: '',\r\n    suggestions: [],\r\n    showSuggestions: false\r\n  };\r\n\r\n  handleInputChanged = (event) => {\r\n    const value = event.target.value;\r\n    //filter using value\r\n    const suggestions = this.props.locations.filter((location) => {\r\n      return location.toUpperCase().indexOf(value.toUpperCase()) > -1;\r\n    });\r\n    this.setState({\r\n      query: value,\r\n      suggestions,\r\n    });\r\n  };\r\n\r\n  handleItemClicked = (suggestion) => {\r\n    this.setState({\r\n      query: suggestion,\r\n      showSuggestions: false\r\n    });\r\n\r\n    this.props.updateEvents(suggestion);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"CitySearch\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"city\"\r\n          value={this.state.query}\r\n          onChange={this.handleInputChanged}\r\n          onFocus={() => { this.setState({ showSuggestions: true }) }}\r\n        />\r\n        <ul className=\"suggestions\" style={this.state.showSuggestions ? {}: { display: 'none' }}>\r\n          {/* Render suggestions. */}\r\n          {this.state.suggestions.map((suggestion) => (\r\n            <li\r\n              key={suggestion}\r\n              onClick={() => {\r\n                this.handleItemClicked(suggestion);\r\n              }}\r\n            >\r\n              {suggestion}\r\n            </li>\r\n          ))}\r\n          {/* Render all cites list item. */}\r\n          <li key=\"all\" onClick={() => this.handleItemClicked(\"all\")}>\r\n            <b>See all cities</b>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CitySearch;\r\n","import React, { Component } from 'react';\r\n\r\nclass NumberOfEvents extends Component {\r\n  //shorthand for using the constructor to initialize state\r\n  state = {\r\n    numberOfEvents: 32,\r\n  };\r\n\r\n  handleInputChanged = (event) => {\r\n    this.setState({\r\n      numberOfEvents: event.target.value,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"NumberOfEvents\">\r\n        <input\r\n          type=\"number\"\r\n          className=\"number-input\"\r\n          value={this.state.numberOfEvents}\r\n          onChange={this.handleInputChanged}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NumberOfEvents;\r\n","const mockData = [\r\n  {\r\n    kind: 'calendar#event',\r\n    etag: '\"3181161784712000\"',\r\n    id: '4eahs9ghkhrvkld72hogu9ph3e_20200519T140000Z',\r\n    status: 'confirmed',\r\n    htmlLink:\r\n      'https://www.google.com/calendar/event?eid=NGVhaHM5Z2hraHJ2a2xkNzJob2d1OXBoM2VfMjAyMDA1MTlUMTQwMDAwWiBmdWxsc3RhY2t3ZWJkZXZAY2FyZWVyZm91bmRyeS5jb20',\r\n    created: '2020-05-19T19:17:46.000Z',\r\n    updated: '2020-05-27T12:01:32.356Z',\r\n    summary: 'Learn JavaScript',\r\n    description:\r\n      'Have you wondered how you can ask Google to show you the list of the top ten must-see places in London? And how Google presents you the list? How can you submit the details of an application? Well, JavaScript is doing these. :) \\n\\nJavascript offers interactivity to a dull, static website. Come, learn JavaScript with us and make those beautiful websites.',\r\n    location: 'London, UK',\r\n    creator: {\r\n      email: 'fullstackwebdev@careerfoundry.com',\r\n      self: true,\r\n    },\r\n    organizer: {\r\n      email: 'fullstackwebdev@careerfoundry.com',\r\n      self: true,\r\n    },\r\n    start: {\r\n      dateTime: '2020-05-19T16:00:00+02:00',\r\n      timeZone: 'Europe/Berlin',\r\n    },\r\n    end: {\r\n      dateTime: '2020-05-19T17:00:00+02:00',\r\n      timeZone: 'Europe/Berlin',\r\n    },\r\n    recurringEventId: '4eahs9ghkhrvkld72hogu9ph3e',\r\n    originalStartTime: {\r\n      dateTime: '2020-05-19T16:00:00+02:00',\r\n      timeZone: 'Europe/Berlin',\r\n    },\r\n    iCalUID: '4eahs9ghkhrvkld72hogu9ph3e@google.com',\r\n    sequence: 0,\r\n    reminders: {\r\n      useDefault: true,\r\n    },\r\n    eventType: 'default',\r\n  },\r\n  {\r\n    kind: 'calendar#event',\r\n    etag: '\"3181159875584000\"',\r\n    id: '3qtd6uscq4tsi6gc7nmmtpqlct_20200520T120000Z',\r\n    status: 'confirmed',\r\n    htmlLink:\r\n      'https://www.google.com/calendar/event?eid=M3F0ZDZ1c2NxNHRzaTZnYzdubW10cHFsY3RfMjAyMDA1MjBUMTIwMDAwWiBmdWxsc3RhY2t3ZWJkZXZAY2FyZWVyZm91bmRyeS5jb20',\r\n    created: '2020-05-19T19:14:30.000Z',\r\n    updated: '2020-05-27T11:45:37.792Z',\r\n    summary: 'React is Fun',\r\n    description:\r\n      'Love HTML, CSS, and JS? Want to become a cool front-end developer? \\n\\nReact is one of the most popular front-end frameworks. There is a huge number of job openings for React developers in most cities. \\n\\nJoin us in our free React training sessions and give your career a new direction. ',\r\n    location: 'Berlin, Germany',\r\n    creator: {\r\n      email: 'fullstackwebdev@careerfoundry.com',\r\n      self: true,\r\n    },\r\n    organizer: {\r\n      email: 'fullstackwebdev@careerfoundry.com',\r\n      self: true,\r\n    },\r\n    start: {\r\n      dateTime: '2020-05-20T14:00:00+02:00',\r\n      timeZone: 'Europe/Berlin',\r\n    },\r\n    end: {\r\n      dateTime: '2020-05-20T15:00:00+02:00',\r\n      timeZone: 'Europe/Berlin',\r\n    },\r\n    recurringEventId: '3qtd6uscq4tsi6gc7nmmtpqlct',\r\n    originalStartTime: {\r\n      dateTime: '2020-05-20T14:00:00+02:00',\r\n      timeZone: 'Europe/Berlin',\r\n    },\r\n    iCalUID: '3qtd6uscq4tsi6gc7nmmtpqlct@google.com',\r\n    sequence: 0,\r\n    reminders: {\r\n      useDefault: true,\r\n    },\r\n    eventType: 'default',\r\n  },\r\n];\r\n\r\nexport { mockData };\r\n","import { mockData } from \"./mock-data\";\r\nimport axios from \"axios\";\r\nimport NProgress from \"nprogress\";\r\n\r\n//create a new array of only event.location names from an event list\r\nexport const extractLocations = (events) => {\r\n  //create an array with all the names\r\n  var extractLocations = events.map((event) => event.location);\r\n  //create an array with duplicates removed using Set\r\n  var locations = [...new Set(extractLocations)];\r\n  return locations;\r\n};\r\n\r\nexport const extractFirstEvent = (events) => {\r\n  return events[0];\r\n};\r\n\r\nexport const getEvents = async () => {\r\n  NProgress.start();\r\n\r\n  if (window.location.href.startsWith(\"http://localhost\")) {\r\n    NProgress.done();\r\n    return mockData;\r\n  }\r\n\r\n  const token = await getAccessToken();\r\n\r\n  if (token) {\r\n    //remove the code from the URL\r\n    removeQuery();\r\n\r\n    const url = 'YOUR_GET_EVENTS_API_ENDPOINT' + '/' + token;\r\n    const result = await axios.get(url);\r\n    if (result.data) {\r\n      var locations = extractLocations(result.data.events);\r\n      localStorage.setItem(\"lastEvents\", JSON.stringify(result.data));\r\n      localStorage.setItem(\"locations\", JSON.stringify(locations));\r\n    }\r\n    NProgress.done();\r\n    return result.data.events;\r\n  }\r\n};\r\n\r\nexport const getAccessToken = async () => {\r\n\r\n  const accessToken = localStorage.getItem('access_token');\r\n\r\n  //do we have a token, and is it valid\r\n  const tokenCheck = accessToken && (await checkToken(accessToken));\r\n  \r\n  //get a new token\r\n  if (!accessToken || tokenCheck.error) {\r\n    await localStorage.removeItem(\"access_token\");\r\n\r\n    //try to get code from url\r\n    const searchParams = new URLSearchParams(window.location.search);\r\n    const code = await searchParams.get(\"code\");\r\n\r\n    //if there's no code, get the URL using the AWS serverless function\r\n    if (!code) {\r\n      const results = await axios.get(\r\n        \"https://db1dgdavpe.execute-api.us-east-1.amazonaws.com/dev/api/get-auth-url\"\r\n      );\r\n      const { authUrl } = results.data;\r\n      return (window.location.href = authUrl);\r\n    }\r\n    return code && getToken(code);\r\n  }\r\n  return accessToken;\r\n\r\n}\r\n\r\nconst checkToken = async (accessToken) => {\r\n  const result = await fetch(\r\n    `https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`\r\n  )\r\n    .then((res) => res.json())\r\n    .catch((error) => error.json());\r\n  return result;\r\n};\r\n\r\nconst removeQuery = () => {\r\n  if (window.history.pushState && window.location.pathname) {\r\n    var newurl =\r\n      window.location.protocol +\r\n      \"//\" +\r\n      window.location.host +\r\n      window.location.pathname;\r\n    window.history.pushState(\"\", \"\", newurl);\r\n  } else {\r\n    newurl = window.location.protocol + \"//\" + window.location.host;\r\n    window.history.pushState(\"\", \"\", newurl);\r\n  }\r\n};\r\n\r\n//get the google auth token using the code\r\nconst getToken = async (code) => {\r\n  const encodeCode = encodeURIComponent(code);\r\n  const { access_token } = await fetch(\r\n    'https://db1dgdavpe.execute-api.us-east-1.amazonaws.com/dev/api/token' + '/' + encodeCode\r\n  )\r\n    .then((res) => {\r\n      return res.json();\r\n    })\r\n    .catch((error) => error);\r\n\r\n  //save the token in local storage\r\n  access_token && localStorage.setItem(\"access_token\", access_token);\r\n\r\n  return access_token;\r\n};","import React from 'react';\nimport './App.css';\nimport EventList from './EventList';\nimport CitySearch from './CitySearch';\nimport NumberOfEvents from './NumberOfEvents';\nimport { Component } from 'react';\nimport { getEvents, extractLocations } from './api';\n\nclass App extends Component {\n  state = {\n    events: [],\n    locations: []\n  };\n\n  componentDidMount() {\n    this.mounted = true;\n    getEvents().then((events) => {\n      if (this.mounted) {\n        //to facilitate tests which unmount components immediatly and use mock data, only load data if the component is mounted\n        this.setState({ events, locations: extractLocations(events) });\n      }\n    });\n  }\n\n  componentWillUnmount(){\n    this.mounted = false;\n  }\n\n  updateEvents = (location) => {\n    getEvents().then((events) => {\n      const locationEvents = (location === 'all') ?\n        events :\n        events.filter((event) => event.location === location);\n      this.setState({\n        events: locationEvents\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <CitySearch locations={this.state.locations} updateEvents={this.updateEvents}/>\n        <NumberOfEvents />\n        <EventList events={this.state.events} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}